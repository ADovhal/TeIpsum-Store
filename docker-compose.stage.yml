# services:
#   # Frontend
#   stage-ecommerce-frontend:
#     build: ./frontend/webform
#     ports: ['22092:80']
#     env_file: ./frontend/webform/.env
#     networks: [stage-net]

  # Nginx
  # stage-ecommerce-nginx:
  #   image: nginx:latest
  #   ports: ["22443:443"]
  #   volumes:
  #     - ./nginx.stage.conf:/etc/nginx/nginx.conf
  #     - /etc/letsencrypt/archive/stage.advd.tech:/etc/nginx/ssl
  #     - /home/adeployer/secrets/.htpasswd:/etc/nginx/secrets/.htpasswd:ro
    # depends_on:
    #   - stage-auth-service
    #   - stage-user-service
    #   - stage-product-service
    #   - stage-order-service
  #   networks: [stage-net]

  # Auth Service
  # stage-auth-service:
    # build: ./backend/auth-service
    # ports: ['22093:9090']
  #   environment:
  #     - SPRING_DATASOURCE_AUTHSERVICE_URL=jdbc:postgresql://stage-auth-db:5432/auth_db
  #     - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:9092
  #     - JWT_SECRET=${JWT_SECRET}
  #   depends_on: [stage-auth-db, kafka]
  #   networks: [stage-net]

  # User Service
  # stage-user-service:
  #   build: ./backend/user-service
  #   environment:
  #     - SPRING_DATASOURCE_USERSERVICE_URL=jdbc:postgresql://stage-user-db:5433/user_db
  #     - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:9092
  #   depends_on: [stage-user-db, kafka]
  #   networks: [stage-net]

  # Product Service
#   stage-product-service:
#     build: ./product-service
#     environment:
#       - SPRING_DATA_MONGODB_URI=mongodb://stage-product-db:27017/product_db
#       - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:9092
#     depends_on: [stage-product-db, kafka]
#     networks: [stage-net]

#   # Order Service
#   stage-order-service:
#     build: ./order-service
#     environment:
#       - SPRING_DATASOURCE_URL=jdbc:postgresql://stage-order-db:5432/order_db
#       - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:9092
#     depends_on: [stage-order-db, kafka]
#     networks: [stage-net]

  # Databases
  # stage-auth-db:
  #   image: postgres:latest
  #   environment:
  #     POSTGRES_DB: auth_db
  #     POSTGRES_USER: ${DB_USER}
  #     POSTGRES_PASSWORD: ${DB_PASSWORD}
  #   volumes: [auth-data:/var/lib/postgresql/data]
  #   networks: [stage-net]

  # stage-user-db:
  #   image: postgres:latest
  #   environment:
  #     POSTGRES_DB: user_db
  #     POSTGRES_USER: ${DB_USER}
  #     POSTGRES_PASSWORD: ${DB_PASSWORD}
  #   volumes: [user-data:/var/lib/postgresql/data]
  #   networks: [stage-net]

#   stage-product-db:
#     image: mongo:latest
#     volumes: [product-data:/data/db]
#     networks: [stage-net]

#   stage-order-db:
#     image: postgres:latest
#     environment:
#       POSTGRES_DB: order_db
#       POSTGRES_USER: ${DB_USER}
#       POSTGRES_PASSWORD: ${DB_PASSWORD}
#     volumes: [order-data:/var/lib/postgresql/data]
#     networks: [stage-net]

  # Kafka and Zookeeper
  # zookeeper:
  #   image: confluentinc/cp-zookeeper:7.0.0
  #   environment: [ZOOKEEPER_CLIENT_PORT=2181]
  #   networks: [stage-net]

  # kafka:
  #   image: confluentinc/cp-kafka:7.0.0
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
  #   ports: ["29092:9092"]
  #   depends_on: [zookeeper]
  #   networks: [stage-net]

# volumes:
#   auth-data:
#   user-data:
#   product-data:
#   order-data:

# networks:
#   stage-net:
#     external: true
#     name: stage-net