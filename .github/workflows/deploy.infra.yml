name: Deploy Infra

on:
  push:
    paths:
      - 'infra/docker-compose.*infra.yml'
      - 'infra/init/**'
    branches:
      - main
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            infra/docker-compose.stage-infra.yml
            infra/docker-compose.prod-infra.yml
            infra/init/
          fetch-depth: 1
          sparse-checkout-cone-mode: false

      - name: Deploy Infra
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ github.ref == 'refs/heads/main' && secrets.PROD_DEPLOY_HOST || secrets.STAGE_DEPLOY_HOST }}
          username: ${{ github.ref == 'refs/heads/main' && secrets.PROD_DEPLOY_USER || secrets.STAGE_DEPLOY_USER }}
          key: ${{ github.ref == 'refs/heads/main' && secrets.PROD_DEPLOY_KEY || secrets.STAGE_DEPLOY_KEY }}
          port: ${{ secrets.DEPLOY_PORT }}
          script: |
            set -e

            PROJECT_DIR="${{ secrets.PROJECT_DIR }}"
            INFRA_DIR="$PROJECT_DIR/infra"
            GIT_BRANCH=${{ github.ref == 'refs/heads/main' && 'main' || 'develop' }}
            DEPLOY_ENV=${{ github.ref == 'refs/heads/main' && 'prod' || 'stage' }}

            echo "üì¶ Preparing infra files..."
            TEMP_DIR=$(mktemp -d)
            
            git clone --branch $GIT_BRANCH --depth 1 \
              --filter=blob:none --sparse \
              https://github.com/${{ github.repository }} $TEMP_DIR
            
            cd $TEMP_DIR
            git sparse-checkout set --no-cone 'infra/docker-compose.*infra.yml' 'infra/init/'
            
            mkdir -p "$INFRA_DIR"
            
            cp -v "$TEMP_DIR/infra/docker-compose."*infra.yml "$INFRA_DIR/"
            cp -rv "$TEMP_DIR/infra/init" "$INFRA_DIR/"
            rm -rf $TEMP_DIR
            
            echo "üìÅ Writing .env file..."
            ENV_PATH="$INFRA_DIR/.env.${DEPLOY_ENV}.infra"
            cat <<EOF > "$ENV_PATH"
            POSTGRES_USER=${{ github.ref == 'refs/heads/main' && secrets.PROD_INFRA_POSTGRES_USER || secrets.STAGE_INFRA_POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ github.ref == 'refs/heads/main' && secrets.PROD_INFRA_POSTGRES_PASSWORD || secrets.STAGE_INFRA_POSTGRES_PASSWORD }}
            EOF

            echo "üîê Preparing init-multiple-dbs.sql from template..."
            TEMPLATE_PATH="$INFRA_DIR/init/init-multiple-dbs.template.sql"
            OUTPUT_PATH="$INFRA_DIR/init/init-multiple-dbs.sql"

            rm -rf "$OUTPUT_PATH" 2>/dev/null || true

            if [ ! -f "$TEMPLATE_PATH" ]; then
              echo "‚ùå Error: Template file not found at $TEMPLATE_PATH"
              ls -la "$INFRA_DIR/init/"
              exit 1
            fi

            cp -v "$TEMPLATE_PATH" "$OUTPUT_PATH.tmp"
            mv -v "$OUTPUT_PATH.tmp" "$OUTPUT_PATH"

            if [ ! -f "$OUTPUT_PATH" ]; then
              echo "‚ùå Error: Failed to create output file at $OUTPUT_PATH"
              ls -la "$INFRA_DIR/init/"
              exit 1
            fi
            
            sed -i \
                -e "s|<<AUTH_SERVICE_DB_NAME>>|${{ github.ref == 'refs/heads/main' && secrets.PROD_AUTH_SERVICE_DB_NAME || secrets.STAGE_AUTH_SERVICE_DB_NAME }}|g" \
                -e "s|<<USER_SERVICE_DB_NAME>>|${{ github.ref == 'refs/heads/main' && secrets.PROD_USER_SERVICE_DB_NAME || secrets.STAGE_USER_SERVICE_DB_NAME }}|g" \
                -e "s|<<PRODUCT_SERVICE_DB_NAME>>|${{ github.ref == 'refs/heads/main' && secrets.PROD_PRODUCT_SERVICE_DB_NAME || secrets.STAGE_PRODUCT_SERVICE_DB_NAME }}|g" \
                -e "s|<<ORDER_SERVICE_DB_NAME>>|${{ github.ref == 'refs/heads/main' && secrets.PROD_ORDER_SERVICE_DB_NAME || secrets.STAGE_ORDER_SERVICE_DB_NAME }}|g" \
                -e "s|<<AUTH_SERVICE_DB_USER>>|${{ github.ref == 'refs/heads/main' && secrets.PROD_AUTH_SERVICE_DB_USER || secrets.STAGE_AUTH_SERVICE_DB_USER }}|g" \
                -e "s|<<USER_SERVICE_DB_USER>>|${{ github.ref == 'refs/heads/main' && secrets.PROD_USER_SERVICE_DB_USER || secrets.STAGE_USER_SERVICE_DB_USER }}|g" \
                -e "s|<<PRODUCT_SERVICE_DB_USER>>|${{ github.ref == 'refs/heads/main' && secrets.PROD_PRODUCT_SERVICE_DB_USER || secrets.STAGE_PRODUCT_SERVICE_DB_USER }}|g" \
                -e "s|<<ORDER_SERVICE_DB_USER>>|${{ github.ref == 'refs/heads/main' && secrets.PROD_ORDER_SERVICE_DB_USER || secrets.STAGE_ORDER_SERVICE_DB_USER }}|g" \
                -e "s|<<AUTH_SERVICE_DB_PASSWORD>>|${{ github.ref == 'refs/heads/main' && secrets.PROD_AUTH_SERVICE_DB_PASSWORD || secrets.STAGE_AUTH_SERVICE_DB_PASSWORD }}|g" \
                -e "s|<<USER_SERVICE_DB_PASSWORD>>|${{ github.ref == 'refs/heads/main' && secrets.PROD_USER_SERVICE_DB_PASSWORD || secrets.STAGE_USER_SERVICE_DB_PASSWORD }}|g" \
                -e "s|<<PRODUCT_SERVICE_DB_PASSWORD>>|${{ github.ref == 'refs/heads/main' && secrets.PROD_PRODUCT_SERVICE_DB_PASSWORD || secrets.STAGE_PRODUCT_SERVICE_DB_PASSWORD }}|g" \
                -e "s|<<ORDER_SERVICE_DB_PASSWORD>>|${{ github.ref == 'refs/heads/main' && secrets.PROD_ORDER_SERVICE_DB_PASSWORD || secrets.STAGE_ORDER_SERVICE_DB_PASSWORD }}|g" \
                "$OUTPUT_PATH"
            echo "üìÑ Generated init-multiple-dbs.sql from template."
                    
            echo "üß± Rebuilding infra containers..."
            cd "$INFRA_DIR"
            docker compose --env-file "$ENV_PATH" -f "docker-compose.${DEPLOY_ENV}-infra.yml" down -v
            docker compose --env-file "$ENV_PATH" -f "docker-compose.${DEPLOY_ENV}-infra.yml" up -d --build

            echo "‚úÖ Infra deployed!"