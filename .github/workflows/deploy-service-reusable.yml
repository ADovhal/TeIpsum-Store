name: Reusable Deploy Service

on:
  workflow_call:
    inputs:
      SERVICE_NAME:
        required: true
        type: string
      DEPLOY_ENV:
        required: true
        type: string
      GIT_BRANCH:
        required: true
        type: string
      COMPOSE_FILE:
        required: true
        type: string
    secrets:
      PROJECT_DIR:
        required: true
      SSH_HOST:
        required: true
      SSH_USER:
        required: true
      SSH_KEY:
        required: true
      DEPLOY_PORT:
        required: true
      SERVICE_SERVER_PORT:
        required: true
      DB_NAME:
        required: true
      DB_URL:
        required: true
      DB_USER:
        required: true
      DB_PASSWORD:
        required: true
      SPRING_KAFKA_BOOTSTRAP_SERVERS:
        required: true
      JWT_SECRET:
        required: true
      JWT_REFRESH_SECRET:
        required: true
      CORS_ALLOWED_ORIGINS:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
            backend/shared-dto/target
          key: maven-${{ hashFiles('backend/pom.xml', 'backend/shared-dto/pom.xml') }}
          restore-keys: |
            maven-

      - name: Build shared-dto
        run: |
          cd backend
          mvn install -N -DskipTests
          cd shared-dto
          mvn clean install -DskipTests -Dparent.relativePath=../pom.xml

      - name: Prepare SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Deploy ${{ inputs.SERVICE_NAME }} to ${{ inputs.DEPLOY_ENV }}
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.DEPLOY_PORT }}
          script: |
            set -e
            
            echo "üì¶ Deploying service: ${{ inputs.SERVICE_NAME }}"
            PROJECT_DIR="${{ secrets.PROJECT_DIR }}"
            SERVICE_DIR="$PROJECT_DIR/backend/${{ inputs.SERVICE_NAME }}"
            DEPLOY_ENV="${{ inputs.DEPLOY_ENV }}"
            COMPOSE_FILE="${{ inputs.COMPOSE_FILE }}"
            GIT_BRANCH="${{ inputs.GIT_BRANCH }}"

            TEMP_DIR=$(mktemp -d)
            echo "üõ† Created temp directory: $TEMP_DIR"

            echo "üîÅ Cloning repository with precise file control..."
            git clone --branch "$GIT_BRANCH" --depth 1 \
              --filter=blob:none --no-checkout \
              https://github.com/${{ github.repository }} "$TEMP_DIR"
            
            cd "$TEMP_DIR"
            
            echo "‚öôÔ∏è Setting up precise file checkout..."
            git sparse-checkout init --no-cone
            git sparse-checkout set \
              "backend/${{ inputs.SERVICE_NAME }}" \
              "backend/shared-dto/src" \
              "backend/shared-dto/pom.xml" \
              "backend/pom.xml"
            
            git checkout "$GIT_BRANCH"
            
            echo "üìÇ Verifying downloaded files structure:"
            ls -la "$TEMP_DIR/backend/shared-dto/src/main/java/com/teipsum/shared/" || \
              { echo "‚ùå Shared DTO sources missing!"; exit 1; }
            ls -la "$TEMP_DIR/backend/pom.xml" || \
              { echo "‚ùå Root pom.xml missing!"; exit 1; }

            echo "üì§ Copying files to target..."
            mkdir -p "$PROJECT_DIR/backend"
            
            rsync -av --delete \
              "$TEMP_DIR/backend/${{ inputs.SERVICE_NAME }}/" \
              "$PROJECT_DIR/backend/${{ inputs.SERVICE_NAME }}/"
            
            mkdir -p "$PROJECT_DIR/backend/shared-dto"
            rsync -av --delete \
              "$TEMP_DIR/backend/shared-dto/src/" \
              "$PROJECT_DIR/backend/shared-dto/src/"
            cp -v \
              "$TEMP_DIR/backend/shared-dto/pom.xml" \
              "$PROJECT_DIR/backend/shared-dto/pom.xml"
            
            cp -v \
              "$TEMP_DIR/backend/pom.xml" \
              "$PROJECT_DIR/backend/pom.xml"

            echo "üîç Final structure verification:"
            find "$PROJECT_DIR/backend/shared-dto/src" -type f | head -10 || \
              { echo "‚ùå Final shared-dto src check failed!"; exit 1; }
            ls -la "$PROJECT_DIR/backend/pom.xml" || \
              { echo "‚ùå Final pom.xml check failed!"; exit 1; }

            rm -rf "$TEMP_DIR"
            
            echo "üìÅ Creating .env..."
            ENV_PATH="$SERVICE_DIR/.env"
            cat <<EOF > "$ENV_PATH"
            SERVICE_SERVER_PORT=${{ secrets.SERVICE_SERVER_PORT }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_URL=${{ secrets.DB_URL }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
            CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}
            SPRING_KAFKA_BOOTSTRAP_SERVERS=${{ secrets.SPRING_KAFKA_BOOTSTRAP_SERVERS }}
            EOF
            
            echo "üîÑ Rebuilding Docker container..."
            cd "$PROJECT_DIR/backend"
            docker compose --env-file "$ENV_PATH" -f "${{ inputs.SERVICE_NAME }}/$COMPOSE_FILE" down --remove-orphans --volumes
            docker compose --env-file "$ENV_PATH" -f "${{ inputs.SERVICE_NAME }}/$COMPOSE_FILE" up -d --build
            
            echo "‚úÖ Successfully deployed ${{ inputs.SERVICE_NAME }}!"