name: Reusable Deploy Service

on:
  workflow_call:
    inputs:
      SERVICE_NAME:
        required: true
        type: string
      SHARED_MODULES:
        required: false
        type: string
        default: ""
      DEPLOY_ENV:
        required: true
        type: string
      GIT_BRANCH:
        required: true
        type: string
      COMPOSE_FILE:
        required: true
        type: string
    secrets:
      PROJECT_DIR:
        required: true
      SSH_HOST:
        required: true
      SSH_USER:
        required: true
      SSH_KEY:
        required: true
      DEPLOY_PORT:
        required: true
      SERVICE_SERVER_PORT:
        required: true
      DB_NAME:
        required: true
      DB_URL:
        required: true
      DB_USER:
        required: true
      DB_PASSWORD:
        required: true
      SPRING_KAFKA_BOOTSTRAP_SERVERS:
        required: true
      JWT_SECRET:
        required: false
      JWT_REFRESH_SECRET:
        required: false
      CORS_ALLOWED_ORIGINS:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Deploy ${{ inputs.SERVICE_NAME }} to ${{ inputs.DEPLOY_ENV }}
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.DEPLOY_PORT }}
          script: |
            set -e
            
            echo "üì¶ Deploying service: ${{ inputs.SERVICE_NAME }}"
            PROJECT_DIR="${{ secrets.PROJECT_DIR }}"
            SERVICE_NAME="${{ inputs.SERVICE_NAME }}"
            SERVICE_DIR="$PROJECT_DIR/backend/$SERVICE_NAME"
            DEPLOY_ENV="${{ inputs.DEPLOY_ENV }}"
            COMPOSE_FILE="${{ inputs.COMPOSE_FILE }}"
            GIT_BRANCH="${{ inputs.GIT_BRANCH }}"

            TEMP_DIR=$(mktemp -d)
            echo "üõ† Created temp directory: $TEMP_DIR"

            echo "üîÅ Cloning repository with precise file control..."
            git clone --branch "$GIT_BRANCH" --depth 1 \
              --filter=blob:none --no-checkout \
              https://github.com/${{ github.repository }} "$TEMP_DIR"
            
            cd "$TEMP_DIR"
            
            echo "‚öôÔ∏è Setting up precise file checkout..."

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ SHARED_MODULES –∏–∑ inputs
            IFS=',' read -ra SHARED <<< "${{ inputs.SHARED_MODULES }}"

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –¥–ª—è sparse-checkout
            MODULES="backend/$SERVICE_NAME backend/pom.xml"
            for module in "${SHARED[@]}"; do
              MODULES="$MODULES backend/$module/src backend/$module/pom.xml backend/$module/Dockerfile.dto"
            done

            git sparse-checkout init --no-cone
            git sparse-checkout set $MODULES
            git checkout "$GIT_BRANCH"

            echo "üì§ Syncing files to remote project dir..."

            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å
            mkdir -p "$PROJECT_DIR/backend/$SERVICE_NAME"
            rsync -av --delete "$TEMP_DIR/backend/$SERVICE_NAME/" "$PROJECT_DIR/backend/$SERVICE_NAME/"

            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º shared-–º–æ–¥—É–ª–∏
            for module in "${SHARED[@]}"; do
              mkdir -p "$PROJECT_DIR/backend/$module"
              rsync -av --delete "$TEMP_DIR/backend/$module/src/" "$PROJECT_DIR/backend/$module/src/"
              cp -v "$TEMP_DIR/backend/$module/pom.xml" "$PROJECT_DIR/backend/$module/pom.xml"
              cp -v "$TEMP_DIR/backend/$module/Dockerfile.dto" "$PROJECT_DIR/backend/$module/Dockerfile.dto"
            done

            # –ö–æ–ø–∏—Ä—É–µ–º parent pom
            cp -v "$TEMP_DIR/backend/pom.xml" "$PROJECT_DIR/backend/pom.xml"

            echo "üîç Verifying file structure..."
            test -f "$PROJECT_DIR/backend/pom.xml"

            for module in "${SHARED[@]}"; do
              test -f "$PROJECT_DIR/backend/$module/pom.xml"
            done

            echo "üß† Checking and building shared modules if needed..."

            POM_HASH=$(sha256sum "$PROJECT_DIR/backend/pom.xml" | cut -d' ' -f1)
            M2_CACHE_DIR="$PROJECT_DIR/backend"

            for module in "${SHARED[@]}"; do
              MODULE_DIR="$PROJECT_DIR/backend/$module"
              HASH_FILE="$PROJECT_DIR/backend/.${module//\//-}.hash"

              echo "üîç Processing $module"

              SHARED_HASH=$(find "$MODULE_DIR/src" "$MODULE_DIR/pom.xml" -type f -exec sha256sum {} + | sort | sha256sum | cut -d" " -f1)
              COMBINED_HASH=$(echo "$POM_HASH$SHARED_HASH" | sha256sum | cut -d" " -f1)

              echo "üîç Combined hash for $module: $COMBINED_HASH"

              if [ ! -f "$HASH_FILE" ] || [ "$COMBINED_HASH" != "$(cat $HASH_FILE)" ]; then
                echo "üî® Building $module in Docker..."
                cd "$PROJECT_DIR/backend"
                docker build -f "$module/Dockerfile.dto" -t "${module//\//-}-builder" .
                    
                echo "üì¶ Extracting Maven .m2 cache for $module..."
                docker rm -f tmp-${module//\//-} 2>/dev/null || true
                docker create --name tmp-${module//\//-} "${module//\//-}-builder"
                mkdir -p "$M2_CACHE_DIR"
                docker cp tmp-${module//\//-}:/root/.m2 "$M2_CACHE_DIR"
                docker rm -f tmp-${module//\//-}
                
                echo "$COMBINED_HASH" > "$HASH_FILE"
              else
                echo "‚úÖ $module unchanged. Skipping build."
              fi
            done

            echo "üìÅ Creating .env..."
            ENV_PATH="$SERVICE_DIR/.env"
            cat <<EOF > "$ENV_PATH"
            SERVICE_SERVER_PORT=${{ secrets.SERVICE_SERVER_PORT }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_URL=${{ secrets.DB_URL }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}
            SPRING_KAFKA_BOOTSTRAP_SERVERS=${{ secrets.SPRING_KAFKA_BOOTSTRAP_SERVERS }}
            EOF

            [ -n "${{ secrets.JWT_SECRET }}" ] && echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> "$ENV_PATH"
            [ -n "${{ secrets.JWT_REFRESH_SECRET }}" ] && echo "JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}" >> "$ENV_PATH"
            
            echo "üîÑ Rebuilding Docker container..."
            cd "$PROJECT_DIR/backend"
            docker compose --env-file "$ENV_PATH" -f "$SERVICE_NAME/$COMPOSE_FILE" down --remove-orphans --volumes
            docker compose --env-file "$ENV_PATH" -f "$SERVICE_NAME/$COMPOSE_FILE" up -d --build

            echo "‚úÖ Successfully deployed $SERVICE_NAME!"